---
title: "CommitConf 2019"
date: 2019-11-25 10:01
author: Ruben Chavarria
categories:
- Conferencias
---

## Conference itself

[Commit Conf 2019 conference agenda](https://t3chfest.uc3m.es/2019/programa/):

- +2000 attendees
- +140 talks and labs
- +45 user groups

<!-- more -->

## Attended talks

### [Refactoring rhyme with simplify](https://www.koliseo.com/events/commit-2019/r4p/5106829466009600/agenda#/5690945286701056/5682927522283520)

- [🎙️ Javier Abadía](https://twitter.com/javierabadia)
- [🎥 Tal](https://www.youtube.com/watch?v=ihu6sEbWHFE&t=4617)
- [📝 Slides](link) (not available yet)
- Rating: ⭐⭐⭐⭐⭐

¿Por qué el miedo conduce a código inmantenible? Como manager, refactorizar
conlleva un riesgo. Tocas algo que funciona, pero se puede romper.

Típica historia de un proyecto fallido: código duplicado, merges enormes, nada
de pair programming, conocimiento aislado, no se entiende el código de los
demás ni hay esfuerzos por hacerlo,...

> Llega un momento en el que cada vez es más atractivo reescribir el proyecto
>desde cero, lo que hace aún más difícil tener ganas de mejorar el código
>existente

Imagen: círculo vicioso del mal software

El código legacy no es malo para nada, es un repositorio de decisiones tomadas
durante muchísimo tiempo. Es la historia viva del proyecto. Esta es la razón
fundamental para decir no a la reescritura.

Podríamos ver las prácticas de [eXtreme Programming] como la solución a estos
problemas.

Imagen: círculo virtuoso del refactoring

¿Qué razones podemos dar para refactorizar? Dar sólo razones económicas, nada de
razones técnicas. De esta forma *Negocio* nos entenderá mejor:

- Es más fácil cambiarlo, para añadir nuevas funcionalidades
- Es más fácil entenderlo, para resolver bugs más rápidamente
- ...

*Collective ownership*: el código es de todos, se comparten unas guías de estilo,
se fomenta el respeto entre los compañeros del equipo,...

En definitiva, comenta varias prácticas de XP, situando el Refactoring en el
centro de todas ellas.

Charla muy bien expuesta, con historias relacionadas con el tema (storytelling),
charla muy ensayada seguramente.

### [DevOps with Docker, Kubernetes and other tools](https://www.koliseo.com/events/commit-2019/r4p/5106829466009600/agenda#/5690945286701056/5667812190191616)

- [🎙️ Laura Morillo](https://twitter.com/Laura_Morillo)
- [🎥 Talk](link) (not available yet)
- [📝 Slides](link) (not available yet)
- Rating ⭐⭐⭐⭐

Se comienza a hablar de *DevOps* allá por 2009, donde en una conferencia, dos
trabajadores de Flickr, un desarrollador y un administrador de sistemas presentaron
cómo desplegaban hasta 10 veces al día.

DevOps trata de colaboración, es como un ciclo infinito.

C.A.L.M.S.: cultura, automatización, lean (acortar ciclos de feedback,...),
medir (el impacto de los cambios), share (compartir lo aprendido)

> Kubernetes hace lo mismo que el mejor de los sysadmin

Habla de muchas herramientas:

- Docker
- Kubernetes: y de cómo configurar servicios, pods, instancias,...
- Prometheus: como herramienta para almacenar series temporales de datos, nos
sirve para medir
- Graphana: herramienta de visualización, creación de alertas,...

*NoOps*: concepto que defiende que la colaboración debe ser entre Negocio y
Desarrollo, porque se presupone que la infraestructura ya debería ser parte de
Desarrollo (cloud,...).

Me da la impresión de que este concepto lo intenta vender alguien de *cloud*.

### [How to improve as a developer](https://www.koliseo.com/events/commit-2019/r4p/5106829466009600/agenda#/5690945286701056/5729000374665216)

- [🎙️ Jorge Franco](https://twitter.com/jfrancoleza)
- [🎙️ Angélica Sanz](link)
- [🎥 Talk](link), Spanish (not available yet)
- [📝 Slides](link) (not available yet)
- Rating ⭐⭐⭐⭐⭐

¿Se necesita carrera universitaria para ser desarrollador? Bueno, no mucho. Se
estudian conceptos relacionados, pero sobra mucho de lo aprendido en la
universidad. La charla empezó bastante controvertida.

¿Especializado a generalista? Ni una cosa ni la otra, t-shaped

¿Deberías seguir las modas? Está bien conocerlas, pero no merece la pena pasar
mucho tiempo con ellas (con todas ellas). Mejor dedicar el tiempo a estudiar
las bases.

¿Objetivos individuales o de equipo? Ambos están bien, pero preferiblemente
objetivos a nivel de equipo.

> Las code review te deberían de encantar

Te sientes mejor cuando los compañeros te dan buen feedback y aprendes con
ellos. Y a la inversa, podrás hacer que tus compañeros se sientan mejor si
les enseñas y les das buen feedback.

Elige tus batallas, no impongas tu opinión, no discutas demasiado, hay veces
que hay que ceder.

Comparte tus ideas, todas ellas tienen valor.

No tengas miedo a preguntar, pero también dedica un poco de tiempo a investigar.

No dejes que tu trabajo te limite, busca tus pequeñas tareas para encontrar
motivación, satisfaccón.

Automatiza todo aquello que tengas que hacer 2 veces o más.

Sé minimalista. Cuanto menos elementos tenga tu código, mejor. Nada de complejidades
añadidas innecesariamente.

Comentar las tareas grandes con el equipo antes de comenzar a realizarlas.
Hay pocas cosas más frustrantes que dedicar tiempo a una tarea que después no
sirva para nada.

Charla tipo entrevista, uno hace las preguntas, otro contesta. Un formato muy
curioso.

### [SOLID front-end architecture](https://www.koliseo.com/events/commit-2019/r4p/5106829466009600/agenda#/5690945286701056/5702151527464960)

- 🎙️ Jose Antonio Suarez Guerrero
- [🎥 Talk](https://www.youtube.com/watch?v=xxFvMF5j99o&t=13525), Spanish
- [📝 Slides](https://speakerdeck.com/albarian/solid-frontend-architecture-do-we-need-it-yes-for-commit-conf-19)
- Rating ⭐⭐⭐

¿Necesitamos arquitectura en el front?

¿Las tecnologías front, son más fuertes o más débiles que las back?

TypeScript pone más difícil que JavaScript hacer las cosas mal.

[Microfrontends], una nueva tendencia, según Jose Antonio no estamos preparados
para ellos todavía. En mi opinión, creo que hay gente muy interesada en este
tema y lo lleva bastante avanzado (ver [ThoughtWorks Tech Radar]).

La gran diferencia entre el front y el back es que el front es lo que ve el
cliente.

En los proyectos en general, el front-end se diseña como una cajita enana
comparada con el gran mega-diseño del back.

Normalmente, no se pasa mucho tiempo diseñando el front:

- componentes que llaman directamente al API
- respuestas del API que se pasan tal cual directamente a la parte visual

Se termina creando dependencias entre componentes, compartiendo estado entre
ellos, acoplándose a respuestas del API,...

El desarrollo front-end es como cualquier otro desarrollo software:

- aplican las mismas metodologías y métodos sistemáticos
- buenas prácticas
- patrones, diseño
- arquitectura

Imagen: propuesta de arquitectura

Muchas siglas, mucha tecnología involucrada que no aporta gran cosa a la charla.
El autor está bastante flipado con el front y con TypeScript en particular.

### [Live coding DDD](https://www.koliseo.com/events/commit-2019/r4p/5106829466009600/agenda#/5137837183729664/5151916791169024)

- [🎙️ Javier Cane](https://twitter.com/JavierCane)
- [🎙️ Rafa Gómez Casas](https://twitter.com/rafaoe)
- [🎥 Talk](https://www.youtube.com/watch?v=YVxTSht-zc0&t=4180), Spanish
- [📝 Slides](link) (not available yet)

### [Unbiasing teams](https://www.koliseo.com/events/commit-2019/r4p/5106829466009600/agenda#/5137837183729664/5716886352297984)

- [🎙️ Félix Lopez](https://twitter.com/flopezluis)
- [🎥 Talk](https://www.youtube.com/watch?v=cITVtXublBg&t=13659), Spanish
- [📝 Slides](link)

### [TDD in the real world](https://www.koliseo.com/events/commit-2019/r4p/5106829466009600/agenda#/5137837183729664/5701249852768256)

- [🎙️ Eduardo Sánchez Contreras](https://twitter.com/edusanchezcon)
- [🎥 Talk](https://www.youtube.com/watch?v=cITVtXublBg&t=21272), Spanish
- [📝 Slides](link)

## Missed talks

- [DevTools: tools and tricks](https://www.koliseo.com/events/commit-2019/r4p/5106829466009600/agenda#/5137837183729664/5754544893984768),
[🎥 Talk](https://www.youtube.com/watch?v=cITVtXublBg&t=24578‬)
- [Three.js: creando entornos interactivos en 3D](https://www.koliseo.com/events/commit-2019/r4p/5106829466009600/agenda#/5137837183729664/5690357815705600)
- [El peor lenguaje del mundo](https://www.koliseo.com/events/commit-2019/r4p/5106829466009600/agenda#/5137837183729664/5640221722935296)
- [Git avanzado](https://www.koliseo.com/events/commit-2019/r4p/5106829466009600/agenda#/5137837183729664/6331844668686336),
[📝 Slides](https://www.jesusamieiro.com/wp-content/uploads/2019/11/20191123-Commit-Conf-Git-avanzado-r2.pdf)
- [How to implement a peer review learning workflow that your team will love](https://www.koliseo.com/events/commit-2019/r4p/5106829466009600/agenda#/5690945286701056/5662705071423488),
[🎥 Talk](https://www.youtube.com/watch?v=xxFvMF5j99o&t=10040),
[📝 Slides](https://prezi.com/afludoizu-dx/peer-reviews/?utm_campaign=share&token=37fd6558aa201726510e1827979d9b5911774b6e4a4b4ac38f1003f0ff682f2d&utm_medium=copy)


## Ideas

## References

- Libro: bundle sobre PHP, TDD y refactoring de Fran Iglesias

[eXtreme Programming]: http://www.extremeprogramming.org/
[Microfrontends]: https://www.thoughtworks.com/radar/techniques/micro-frontends
[ThoughtWorks Tech Radar]: https://www.thoughtworks.com/radar
[patrón Criteria]: https://en.wikipedia.org/wiki/Specification_pattern
[Disonancia cognitiva]: https://en.wikipedia.org/wiki/Cognitive_dissonance
