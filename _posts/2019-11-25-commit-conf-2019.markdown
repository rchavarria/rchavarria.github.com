---
title: "CommitConf 2019"
date: 2019-11-25 10:01
author: Ruben Chavarria
categories:
- Conferencias
---

## Conference itself

[Commit Conf 2019 conference agenda](https://t3chfest.uc3m.es/2019/programa/):

- +2000 attendees
- +140 talks and labs
- +45 user groups

<!-- more -->

## Attended talks

### [Refactoring rhyme with simplify](https://www.koliseo.com/events/commit-2019/r4p/5106829466009600/agenda#/5690945286701056/5682927522283520)

- [üéôÔ∏è Javier Abad√≠a](https://twitter.com/javierabadia)
- [üé• Tal](https://www.youtube.com/watch?v=ihu6sEbWHFE&t=4617)
- [üìù Slides](link) (not available yet)
- Rating: ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê

¬øPor qu√© el miedo conduce a c√≥digo inmantenible? Como manager, refactorizar
conlleva un riesgo. Tocas algo que funciona, pero se puede romper.

T√≠pica historia de un proyecto fallido: c√≥digo duplicado, merges enormes, nada
de pair programming, conocimiento aislado, no se entiende el c√≥digo de los
dem√°s ni hay esfuerzos por hacerlo,...

> Llega un momento en el que cada vez es m√°s atractivo reescribir el proyecto
>desde cero, lo que hace a√∫n m√°s dif√≠cil tener ganas de mejorar el c√≥digo
>existente

Imagen: c√≠rculo vicioso del mal software

El c√≥digo legacy no es malo para nada, es un repositorio de decisiones tomadas
durante much√≠simo tiempo. Es la historia viva del proyecto. Esta es la raz√≥n
fundamental para decir no a la reescritura.

Podr√≠amos ver las pr√°cticas de [eXtreme Programming] como la soluci√≥n a estos
problemas.

Imagen: c√≠rculo virtuoso del refactoring

¬øQu√© razones podemos dar para refactorizar? Dar s√≥lo razones econ√≥micas, nada de
razones t√©cnicas. De esta forma *Negocio* nos entender√° mejor:

- Es m√°s f√°cil cambiarlo, para a√±adir nuevas funcionalidades
- Es m√°s f√°cil entenderlo, para resolver bugs m√°s r√°pidamente
- ...

*Collective ownership*: el c√≥digo es de todos, se comparten unas gu√≠as de estilo,
se fomenta el respeto entre los compa√±eros del equipo,...

En definitiva, comenta varias pr√°cticas de XP, situando el Refactoring en el
centro de todas ellas.

Charla muy bien expuesta, con historias relacionadas con el tema (storytelling),
charla muy ensayada seguramente.

### [DevOps with Docker, Kubernetes and other tools](https://www.koliseo.com/events/commit-2019/r4p/5106829466009600/agenda#/5690945286701056/5667812190191616)

- [üéôÔ∏è Laura Morillo](https://twitter.com/Laura_Morillo)
- [üé• Talk](link) (not available yet)
- [üìù Slides](link) (not available yet)
- Rating ‚≠ê‚≠ê‚≠ê‚≠ê

Se comienza a hablar de *DevOps* all√° por 2009, donde en una conferencia, dos
trabajadores de Flickr, un desarrollador y un administrador de sistemas presentaron
c√≥mo desplegaban hasta 10 veces al d√≠a.

DevOps trata de colaboraci√≥n, es como un ciclo infinito.

C.A.L.M.S.: cultura, automatizaci√≥n, lean (acortar ciclos de feedback,...),
medir (el impacto de los cambios), share (compartir lo aprendido)

> Kubernetes hace lo mismo que el mejor de los sysadmin

Habla de muchas herramientas:

- Docker
- Kubernetes: y de c√≥mo configurar servicios, pods, instancias,...
- Prometheus: como herramienta para almacenar series temporales de datos, nos
sirve para medir
- Graphana: herramienta de visualizaci√≥n, creaci√≥n de alertas,...

*NoOps*: concepto que defiende que la colaboraci√≥n debe ser entre Negocio y
Desarrollo, porque se presupone que la infraestructura ya deber√≠a ser parte de
Desarrollo (cloud,...).

Me da la impresi√≥n de que este concepto lo intenta vender alguien de *cloud*.

### [How to improve as a developer](https://www.koliseo.com/events/commit-2019/r4p/5106829466009600/agenda#/5690945286701056/5729000374665216)

- [üéôÔ∏è Jorge Franco](https://twitter.com/jfrancoleza)
- [üéôÔ∏è Ang√©lica Sanz](link)
- [üé• Talk](link), Spanish (not available yet)
- [üìù Slides](link) (not available yet)
- Rating ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê

¬øSe necesita carrera universitaria para ser desarrollador? Bueno, no mucho. Se
estudian conceptos relacionados, pero sobra mucho de lo aprendido en la
universidad. La charla empez√≥ bastante controvertida.

¬øEspecializado a generalista? Ni una cosa ni la otra, t-shaped

¬øDeber√≠as seguir las modas? Est√° bien conocerlas, pero no merece la pena pasar
mucho tiempo con ellas (con todas ellas). Mejor dedicar el tiempo a estudiar
las bases.

¬øObjetivos individuales o de equipo? Ambos est√°n bien, pero preferiblemente
objetivos a nivel de equipo.

> Las code review te deber√≠an de encantar

Te sientes mejor cuando los compa√±eros te dan buen feedback y aprendes con
ellos. Y a la inversa, podr√°s hacer que tus compa√±eros se sientan mejor si
les ense√±as y les das buen feedback.

Elige tus batallas, no impongas tu opini√≥n, no discutas demasiado, hay veces
que hay que ceder.

Comparte tus ideas, todas ellas tienen valor.

No tengas miedo a preguntar, pero tambi√©n dedica un poco de tiempo a investigar.

No dejes que tu trabajo te limite, busca tus peque√±as tareas para encontrar
motivaci√≥n, satisfacc√≥n.

Automatiza todo aquello que tengas que hacer 2 veces o m√°s.

S√© minimalista. Cuanto menos elementos tenga tu c√≥digo, mejor. Nada de complejidades
a√±adidas innecesariamente.

Comentar las tareas grandes con el equipo antes de comenzar a realizarlas.
Hay pocas cosas m√°s frustrantes que dedicar tiempo a una tarea que despu√©s no
sirva para nada.

Charla tipo entrevista, uno hace las preguntas, otro contesta. Un formato muy
curioso.

### [SOLID front-end architecture](https://www.koliseo.com/events/commit-2019/r4p/5106829466009600/agenda#/5690945286701056/5702151527464960)

- üéôÔ∏è Jose Antonio Suarez Guerrero
- [üé• Talk](https://www.youtube.com/watch?v=xxFvMF5j99o&t=13525), Spanish
- [üìù Slides](https://speakerdeck.com/albarian/solid-frontend-architecture-do-we-need-it-yes-for-commit-conf-19)
- Rating ‚≠ê‚≠ê‚≠ê

¬øNecesitamos arquitectura en el front?

¬øLas tecnolog√≠as front, son m√°s fuertes o m√°s d√©biles que las back?

TypeScript pone m√°s dif√≠cil que JavaScript hacer las cosas mal.

[Microfrontends], una nueva tendencia, seg√∫n Jose Antonio no estamos preparados
para ellos todav√≠a. En mi opini√≥n, creo que hay gente muy interesada en este
tema y lo lleva bastante avanzado (ver [ThoughtWorks Tech Radar]).

La gran diferencia entre el front y el back es que el front es lo que ve el
cliente.

En los proyectos en general, el front-end se dise√±a como una cajita enana
comparada con el gran mega-dise√±o del back.

Normalmente, no se pasa mucho tiempo dise√±ando el front:

- componentes que llaman directamente al API
- respuestas del API que se pasan tal cual directamente a la parte visual

Se termina creando dependencias entre componentes, compartiendo estado entre
ellos, acopl√°ndose a respuestas del API,...

El desarrollo front-end es como cualquier otro desarrollo software:

- aplican las mismas metodolog√≠as y m√©todos sistem√°ticos
- buenas pr√°cticas
- patrones, dise√±o
- arquitectura

Imagen: propuesta de arquitectura

Muchas siglas, mucha tecnolog√≠a involucrada que no aporta gran cosa a la charla.
El autor est√° bastante flipado con el front y con TypeScript en particular.

### [Live coding DDD](https://www.koliseo.com/events/commit-2019/r4p/5106829466009600/agenda#/5137837183729664/5151916791169024)

- [üéôÔ∏è Javier Cane](https://twitter.com/JavierCane)
- [üéôÔ∏è Rafa G√≥mez Casas](https://twitter.com/rafaoe)
- [üé• Talk](https://www.youtube.com/watch?v=YVxTSht-zc0&t=4180), Spanish
- [üìù Slides](link) (not available yet)
- Rating ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê

Segunda parte de una serie de charlas tipo elige tu propia aventura.

Primero un poco de contexto, siguiendo una arquitectura hexagonal, proponen la
siguiente nomenclatura para los tests:

- unitario, testea un caso de uso, implementado por un Application Service al que
le inyectamos otros Services, Models y Repositories
- integraci√≥n: testea las implementaciones de los Repositories
- aceptaci√≥n: testea todo, desde el Controller hasta la implementaci√≥n del
Repository pasando por el Application Service

¬øC√≥mo comunicar dos m√≥dulos (hablando en t√©rminos de DDD)? Por ejemplo, el m√≥dulo
de notificaciones quiere mandar un email a todos los usuarios (m√≥dulo de usuarios)
inform√°ndoles sobre los nuevos cursos (m√≥dulo de cursos) del √∫ltimo mes.

1. CQRS (elegido), enviando queries a los otros m√≥dulos y enviando comandos a
nuestro m√≥dulo
2. Inyectar Repository en nuestro Application Service
3. Inyectar Application Service

Comienza a testear de fuera hacia dentro, implementando un test de aceptaci√≥n.

En el Controller, como estoy en infrastructura, me permito acoplarme a la BBDD
(implementaci√≥n del Repo), a Spring, al framework

El Controller manda un DTO (con tipos primitivos, que son f√°ciles de serializar)
al Application Service. Pero no le llama directamente, si no que manda un
Comando al Command Bus donde lo recibir√° el Command Handler que ser√° donde
comienza nuestro caso de uso. El Command Handler es como el Application Service
en CQRS.

*Aqu√≠ mezcla arquitectura hexagonal, DDD, event driven arquitecture,... y me
empiezo a perder*

Para comunicar con otros m√≥dulos mandar√° queries al Query Bus. Quiz√° no sean
Bounded Context diferentes todav√≠a, pero El Query Bus nos desacopla much√≠simo
por si en un futuro queremos que sean Bounded Context diferentes.

¬øInyectar el Repo? Mejor que no, porque un m√≥dulo (o Bounded Context) conocer√°
el modelo de datos de otro m√≥dulo/BC

¬øInyectar el Application Service? Algo menos malo. Compartir√≠an DTOs, pero a√∫n
as√≠ sigue conociendo detalles de otro m√≥dulo/bc.

¬øY si ahora cambiamos la base de datos, de MySQL a Elasticsearch? F√°cil, no?
Cambiamos la implementaci√≥n del Repository, y ya est√°.

Casi, casi. En las queries a MySQL, se utiliza el [patr√≥n Criteria], donde el
Repository espec√≠fico utiliza esa Criteria para mapear con Hibernate a MySQL.
En la implementaci√≥n de Elasticsearch, mantendremos los Criteria, pero el
mapeo ser√° diferente, depender√° de la nueva implementaci√≥n.

Ahora ya solo faltar√≠a migrar los datos. Aqu√≠ me he perdido: eventos guardados,
etiquetas de los elementos de la base de datos en JSON para facilitar las
b√∫squedas (que?), ¬ø?

Charla con ritmo trepidante, mucho contexto anterior, me falta mucho conocimiento
sobre DDD, arquitectura hexagonal, event sourcing,...

### [Unbiasing teams](https://www.koliseo.com/events/commit-2019/r4p/5106829466009600/agenda#/5137837183729664/5716886352297984)

- [üéôÔ∏è F√©lix Lopez](https://twitter.com/flopezluis)
- [üé• Talk](https://www.youtube.com/watch?v=cITVtXublBg&t=13659), Spanish
- [üìù Slides](link)
- Rating ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê

¬øC√≥mo tomamos decisiones? ¬øC√≥mo piensan las personas? Conociendo algunos de los
sesgos existentes, podremos entender mejor a las personas que forman parte de
nuestros equipos y a las decisiones que toman.

Creemos que el mundo es como lo percibimos nosotros, pero existen tantas
percepciones diferentes como personas.

Sesgos y estereotipos: no tienen por qu√© ser malos, nos ayudan a tomar decisiones
diarias de forma eficiente, ahorrando carga cognitiva.

Reciprocidad: tendemos a devolver los favores que recibimos.

El sentido com√∫n no existe de forma global, depende de la cultura

Creemos que tomamos decisiones razonadas, pero nos influyen mucho factores
externos: hambre, sue√±o, fr√≠o/calor,... Por ejemplo, unos jueces condenaban al
100% de los juzgados justo antes de la hora de comer

En una valoraci√≥n, si pides informaci√≥n antes, te puede afectar, como el *ancla*
en una negociaci√≥n. Ten en cuenta esto antes de valorar/juzgar a alguien.

Sesgo de utilidad: la opini√≥n de un senior pesa m√°s que la de un junior

Sesgo status quo: aqu√≠ se hace siempre as√≠

**Entendiendo a los dem√°s**

Las personas tienden a justificarse siempre, por muy rid√≠culo que sea (historia
del hombre hipnotizado que despierta con paraguas en d√≠a soleado)

[Disonancia cognitiva:] nos cuesta dejar algo que no nos gusta si nos ha costado
mucho trabajo llegar hasta ah√≠

Error de atribuci√≥n: atribuimos los errores de otros a su personalidad 
(es malo, es vago) mientras que nuestros errores los atribuimos a causas 
externas (mala suerte, esto fall√≥,...). Una posible soluci√≥n es asumir que todo
el mundo es bueno, que intenta hacer las cosas lo mejor que sabe/puede

Las empresas deber√≠an fomentar la ayuda entre personas, es bueno que la gente
se focalice en los dem√°s

Solemos hacer favores a personas a las que hemos hecho favores anteriormente

Cuando alguien te cae mal, buscas justificaciones para representarlo como mala
persona

Si quieres que alguien se comporte de alguna forma en concreto, facil√≠tale que
se comporte de esa forma, ay√∫dale, incent√≠bale (si quieres que alguien coma
bien, pon la comida sana en un lugar visible y esconde la comida menos sana)

> Cambiando el entorno puedes cambiar el comportamiento de las personas

**Comunicaci√≥n**

Tomamos decisiones dependiendo de c√≥mo nos presentan la informaci√≥n. ¬øQu√©
prefieres?

1. Una operaci√≥n con 90% de supervivencia
2. Una operaci√≥n con 10% de mortalidad

La comunicaci√≥n entre iguales s√≥lo es posible si no hay castigo. Por eso no te
quejas a tu jefe, por miedo a que te despida

Incompetencia aprendida: la gente/alumnos cumple las espectativas (buenas y 
malas) de su jefe/profesor. Historia de los alumnos y los anagramas

Experimento con nosotros doblando una hoja de papel:

> Siempre interpretamos los mensajes, por sencillos y concretos que sean. Cuidado
con asumir que la gente entiende exactamente lo que t√∫ quieres transmitir

### [TDD in the real world](https://www.koliseo.com/events/commit-2019/r4p/5106829466009600/agenda#/5137837183729664/5701249852768256)

- [üéôÔ∏è Eduardo S√°nchez Contreras](https://twitter.com/edusanchezcon)
- [üé• Talk](https://www.youtube.com/watch?v=cITVtXublBg&t=21272), Spanish
- [üìù Slides](link)

## Missed talks

- [DevTools: tools and tricks](https://www.koliseo.com/events/commit-2019/r4p/5106829466009600/agenda#/5137837183729664/5754544893984768),
[üé• Talk](https://www.youtube.com/watch?v=cITVtXublBg&t=24578‚Ä¨)
- [Three.js: creando entornos interactivos en 3D](https://www.koliseo.com/events/commit-2019/r4p/5106829466009600/agenda#/5137837183729664/5690357815705600)
- [El peor lenguaje del mundo](https://www.koliseo.com/events/commit-2019/r4p/5106829466009600/agenda#/5137837183729664/5640221722935296)
- [Git avanzado](https://www.koliseo.com/events/commit-2019/r4p/5106829466009600/agenda#/5137837183729664/6331844668686336),
[üìù Slides](https://www.jesusamieiro.com/wp-content/uploads/2019/11/20191123-Commit-Conf-Git-avanzado-r2.pdf)
- [How to implement a peer review learning workflow that your team will love](https://www.koliseo.com/events/commit-2019/r4p/5106829466009600/agenda#/5690945286701056/5662705071423488),
[üé• Talk](https://www.youtube.com/watch?v=xxFvMF5j99o&t=10040),
[üìù Slides](https://prezi.com/afludoizu-dx/peer-reviews/?utm_campaign=share&token=37fd6558aa201726510e1827979d9b5911774b6e4a4b4ac38f1003f0ff682f2d&utm_medium=copy)


## Ideas

## References

- Libro: bundle sobre PHP, TDD y refactoring de Fran Iglesias

[eXtreme Programming]: http://www.extremeprogramming.org/
[Microfrontends]: https://www.thoughtworks.com/radar/techniques/micro-frontends
[ThoughtWorks Tech Radar]: https://www.thoughtworks.com/radar
[patr√≥n Criteria]: https://en.wikipedia.org/wiki/Specification_pattern
[Disonancia cognitiva]: https://en.wikipedia.org/wiki/Cognitive_dissonance
